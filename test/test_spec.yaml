version: 'v0.0.0'
LabBook: null
SciViz: # top level tab
  auth: True
  # header:
  #   image_route: ./IBLlogo.png
  #   text: Data Portal
  hostname: 'localdb'
  # login:
  #   image_route: ./IBLlogo.png
  pages: # individual pages
    # The first page in the list of pages is the splash page after login
    # By convention this should be a home page with a markdown component
    Home:
      route: /home
      grids:
        grid5:
          type: fixed
          columns: 1
          row_height: 680
          components:
            comp:
              x: 0
              y: 0
              height: 1
              width: 1
              type: markdown
              # this example of image_route has the image in the /src dir
              image_route: ../../logo.svg
              text: |
                # Welcome!

                This is a basic homepage created entirely through the config file.

                It is comprised of a single markdown component that supports the [github markdown spec.](https://guides.github.com/features/mastering-markdown/)

                For more examples of the markdown component go the the markdown page.
    Markdown:
      route: /mkdown # dev, be careful of name collisions
      grids:
        grid1:
          type: fixed
          max_component_per_page: 20
          columns: 2
          row_height: 680
          components:
            component1:
              x: 0
              y: 0
              height: 1
              width: 1
              type: markdown
              text: |
                ![Image](https://www.datajoint.org/static/images/djopen-color-dark.png)
                # Markdown support  
                ### Hello!  
                this is an example of the markdown component  
                ~~~python  
                print('Nice! Codeblock support!')  
                ~~~  
                list: 
                  * apple
                  * pear
                  * melon

                ordered list:
                1. one
                2. two
                3. three

                `Inline code highlight! `

                [Hyperlinks!](https://www.google.com/)
                # h1
                ## h2
                ### h3
                #### h4
                ##### h5
                ###### h6

                nested lists:
                  * parent
                    * child

                task lists:
                  * [x] apples
                  * [x] pizza
                  * [ ] chicken

                tables:

                first header | second header
                ------------ | -------------
                Content cell 1 | content cell 2
                Content cell 3 | content cell 4
    Table:
      route: /tableExample
      args:
        - subject_name
        - session_number
      grids:
        grid1:
          type: fixed
          max_component_per_page: 20
          columns: 2
          row_height: 680
          components:
            Example table (conditional row coloring): # yaml allows keys with spaces!
              route: /query2
              x: 0
              y: 0
              height: 1
              width: 1
              type: djtable
              link: /hiddenpage
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(test_group1_simple):
                    TableA, TableB = (test_group1_simple.TableA, test_group1_simple.TableB)
                    q = ((TableA * TableB).proj(
                        ...,
                        #_sciviz_font='IF(a_name = "Raphael", "rgb(255, 0, 0)", NULL)',
                        _sciviz_background='IF(a_name = "Raphael", "rgba(50, 255, 0, 0.16)", "NULL")',
                        ))
                    return {'query': q, 'fetch_args': {'order_by': '_sciviz_background ASC'}}
            example table 1 markdown:
              x: 1
              y: 0
              height: 1
              width: 1
              type: markdown
              text: |
                # Hello! 
                This is a Datajoint table component populated by the codeblock:
                ~~~python  
                def dj_query(vms):
                    TableA, TableB = (vms['test_group1_simple'].TableA,
                                      vms['test_group1_simple'].TableB)
                    q = ((TableA * TableB).proj(
                        ...,
                        _sciviz_background='''
                        IF(a_name = "Raphael",
                        "rgba(50, 255, 0, 0.16)",
                        "rgba(255, 0, 0, 0.16)")
                        ''',))
                    return dict(query=q, fetch_args=[])
                ~~~
                # *Sci-Viz* speaks datajoint natively, isnt that neat!  

                ### About the coloring in the table:
                Notice that this query has a projection that produces an additional column.
                The column `_sciviz_background` accepts any css compatable color,
                so if you want custom coloring based off of a condition in your query result 
                all you have to do is make a projection with a condition that inserts a color into the `_sciviz_background` column.

                If the `_sciviz_background` column exists, the frontend automatically hides the column and applys its css colors to each row.
                The onlt thing that the `_sciviz_background` column cares about is that it has a valid css color or NULL in it,
                so you can enforce as many color conditions as you want.

                This same functionality also exists for the text using the column `_sciviz_font`
                [here is a good tool for picking css colors.](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Colors/Color_picker_tool)
            Example table 2 (restriction):
              route: /exampletable2
              x: 0
              y: 1
              height: 1
              width: 1
              type: table
              link: /hiddenpage
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs, a_id=1)
              dj_query: >
                def dj_query(test_group1_simple):
                    TableA, TableB = (test_group1_simple.TableA,
                                      test_group1_simple.TableB)
                    return dict(query=(TableA * TableB), fetch_args=[])
            example table 2 markdown:
              x: 1
              y: 1
              height: 1
              width: 1
              type: markdown
              text: |
                # DJ table with restriction:

                This is a datajoint table from the following query:
                ~~~python
                  def dj_query(test_group1_simple):
                    TableA, TableB = (test_group1_simple.TableA,
                                      test_group1_simple.TableB)
                    return dict(query=(TableA * TableB), fetch_args=[])
                ~~~

                But it also has the following restriction applied to it:
                ~~~python
                  def restriction(**kwargs):
                    return dict(**kwargs, a_id=1)
                ~~~
                ## Why is this useful?

                What this does is it injects the additional restriction into the query.

                This is useful because you can use anchoring and aliasing in the config to
                copy one query to many components and only have to change the restriction on the
                component
            Mouse table with linking:
              route: /dawdgargaefdaefa
              x: 0
              y: 1
              height: 1
              width: 1
              type: table
              link: /hiddenpage
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(test_group1_simple):
                    Mouse = test_group1_simple.Mouse
                    return dict(query=(Mouse), fetch_args=[])
    Plots:
      route: /plots
      grids:
        grid1:
          type: fixed
          columns: 2
          row_height: 80
          components:
            mybuttons:
              x: 0
              y: 0
              height: 1
              width: 1
              type: radiobuttons
              channel: mybuttons
              content:
                mouse 0: 'mouse_id=0'
                mouse 1: 'mouse_id=1'
                mouse 2: 'mouse_id=2'
            mydropdown:
              x: 1
              y: 0
              height: 1
              width: 1
              type: dropdown-query
              channel: mydropdown
              route: /testtest
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(test_group1_simple):
                    Mouse = test_group1_simple.Mouse
                    q = dj.U('mouse_id') & Mouse
                    return dict(query=q, fetch_args=[])
            Example table (conditional row coloring): # yaml allows keys with spaces!
              route: /weuroiewjqroiew
              x: 0
              y: 20
              height: 6
              width: 1
              type: djtable
              channel: mydjtable
              channels: [mybuttons]
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(test_group1_simple):
                    Mouse = test_group1_simple.Mouse
                    return dict(query=Mouse, fetch_args=[])
            tableplots:
              route: /plot1d
              type: plot:plotly:stored_json
              x: 0
              y: 14
              height: 6
              width: 1
              channels: [mydjtable]
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(test_group1_simple):
                    MousePlots = test_group1_simple.MousePlots
                    return dict(query=MousePlots, fetch_args=['plot'])
    Metadata:
      route: /metadata
      grids:
        grid2:
          type: fixed
          columns: 6
          row_height: 233
          components:
            comp:
              type: metadata
              route: /metadata1
              x: 1
              y: 1
              height: 1
              width: 1
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs, b_id=19)
              dj_query: >
                def dj_query(test_group1_simple):
                    TableA, TableB = (test_group1_simple.TableA,
                                      test_group1_simple.TableB)
                    return dict(query=(TableA * TableB), fetch_args=[])
            desc:
              type: markdown
              x: 3
              y: 0
              height: 3
              width: 3
              text: |
                # This is a metadata component
                it is not very useful by itself but when combined with the dynamic
                component generator it can provide a useful description of what the other
                components are.
    Dynamic Grid:
      route: /dynamicGrid
      grids:
        dropdownGrid:
          type: fixed
          columns: 1
          row_height: 80
          components:
            mydropdown:
              x: 1
              y: 0
              height: 1
              width: 1
              type: dropdown-static
              channel: testtest
              content:
                none: ''
                jeff: mouse_id=0
                splinter: mouse_id=1

        dgrid:
          route: /dgrid
          type: dynamic
          channels: [testtest]
          columns: 1
          row_height: 600
          restriction: >
            def restriction(**kwargs):
                return dict(**kwargs)
          dj_query: >
            def dj_query(test_group1_simple):
                Mouse = test_group1_simple.Mouse
                return dict(query=(Mouse.proj()), fetch_args=[])
          component_templates:
            comp2:
              route: /myMeta
              type: metadata
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(test_group1_simple):
                    Mouse = test_group1_simple.Mouse
                    return dict(query=(Mouse), fetch_args=[])
            comp1:
              route: /myPlot
              type: plot:plotly:stored_json
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(test_group1_simple):
                    MousePlots = test_group1_simple.MousePlots
                    return dict(query=(MousePlots), fetch_args=['plot'])
            comp3:
              route: /myTableD
              type: table
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(test_group1_simple):
                    MousePlots = test_group1_simple.MousePlots
                    return dict(query=(MousePlots), fetch_args=[])
    Dynamic Form:
      route: /dynamicForm
      grids:
        grid1:
          type: fixed
          columns: 2
          row_height: 600
          components:
            insert:
              route: /insert
              x: 0
              y: 0
              height: 1
              width: 1
              type: form
              tables:
                - test_group1_simple.TableB
                - test_group1_simple.TableC
              map:
                - type: attribute
                  input: B Id
                  destination: b_id
                - type: attribute
                  input: B Number
                  destination: b_number
                - type: table
                  input: Table A
                  destination: test_group1_simple.TableA
                  map:
                    - type: attribute
                      input: A Id
                      destination: a_id
                - type: attribute
                  input: C Id
                  destination: c_id
            insert2:
              route: /insert2
              x: 1
              y: 0
              height: 1
              width: 1
              type: form
              tables:
                - test_group1_simple.TableB
                - test_group1_simple.TableC
              map:
                - type: attribute
                  input: B Id
                  destination: b_id
                - type: attribute
                  input: B Number
                  destination: b_number
                - type: table
                  input: Table A
                  destination: test_group1_simple.TableA
                - type: attribute
                  input: C Id
                  destination: c_id
            insert3:
              route: /insert3
              x: 0
              y: 1
              height: 1
              width: 1
              type: form
              tables:
                - '{group}_simple.TableB'
                - '{group}_simple.TableC'
            insert4:
              route: /insert4
              x: 1
              y: 1
              height: 1
              width: 1
              type: form
              tables:
                - test_group2_simple.DiffTableB
                - test_group1_simple.TableC
            insert5:
              route: /insert5
              x: 0
              y: 2
              height: 1
              width: 1
              type: form
              tables:
                - test_group1_simple.TableB
                - test_group2_simple.DiffTableB
            insert6:
              route: /insert6
              x: 1
              y: 2
              height: 1
              width: 1
              type: form
              tables:
                - test_group3_simple.TableY
                - test_group4_simple.DiffTableY
            insert7:
              route: /insert7
              x: 0
              y: 3
              height: 1
              width: 1
              type: form
              tables:
                - test_group4_simple.TableW
            insert8:
              route: /insert8
              x: 1
              y: 3
              height: 1
              width: 1
              type: form
              tables:
                - test_group1_simple.TableB
                - test_group2_simple.DiffTableB
                - test_group1_simple.TableC
                - test_group3_simple.TableY
                - test_group4_simple.DiffTableY
                - test_group4_simple.TableW
    Hidden Page:
      route: /hiddenpage
      hidden: True
      grids:
        dgrid:
          route: /dgridasdawdd
          type: dynamic
          columns: 3
          row_height: 600
          restriction: >
            def restriction(**kwargs):
                return dict(**kwargs)
          dj_query: >
            def dj_query(test_group1_simple):
                Mouse = test_group1_simple.Mouse
                return dict(query=(Mouse.proj()), fetch_args=[])
          component_templates:
            comp2:
              route: /myMetakkljj
              type: metadata
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(test_group1_simple):
                    Mouse = test_group1_simple.Mouse
                    return dict(query=(Mouse), fetch_args=[])
        mygrid:
          type: fixed
          columns: 3
          row_height: 600
          components:
            Example table (conditional row coloring): # yaml allows keys with spaces!
              route: /nvoihfoewo
              x: 0
              y: 0
              height: 1
              width: 1
              type: djtable
              channel: mytable
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(test_group1_simple):
                    TableA, TableB = (test_group1_simple.TableA, test_group1_simple.TableB)
                    q = ((TableA * TableB).proj(
                        ...,
                        #_sciviz_font='IF(a_name = "Raphael", "rgb(255, 0, 0)", NULL)',
                        _sciviz_background='IF(a_name = "Raphael", "rgba(50, 255, 0, 0.16)", "NULL")',
                        ))
                    return {'query': q, 'fetch_args': {'order_by': '_sciviz_background ASC'}}
            Mouse metadata:
              route: /dawdgar
              x: 1
              y: 0
              height: 1
              width: 1
              type: metadata
              link: /hiddenpage
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(test_group1_simple):
                    Mouse = test_group1_simple.Mouse
                    return dict(query=(Mouse), fetch_args=[])
            testplot:
              type: plot:plotly:stored_json
              x: 0
              y: 0
              height: 1
              width: 1
              route: /someplotroute
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(test_group1_simple):
                    MousePlots = test_group1_simple.MousePlots
                    return dict(query=(MousePlots), fetch_args=['plot'])
            picture:
              type: file:image:attach
              route: /picture
              height: 1
              width: 1
              x: 2
              y: 0
              restriction: >
                def restriction(**kwargs):
                    return dict(**kwargs)
              dj_query: >
                def dj_query(test_group1_simple):
                    MousePics = test_group1_simple.MousePics
                    return dict(query=MousePics, fetch_args=['image_payload'])
