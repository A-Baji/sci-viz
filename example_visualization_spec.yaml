version: 'v0.0.0'
LabBook: null
SciViz: # top level tab
  auth:
    mode: database # reuse from DJ LabBook
  pages: # individual pages
    page1: # name reference of the page
      route: /sessions # dev, be careful of name collisions
      args: null
      hidden: false
      grids:
        grid1:
          type: fixed
          max_component_per_page: 1
          rows: 1
          columns: 1
          components:
            component1:
              row_span: 0
              column_span: 0
              type: entry-browser # entry-browser|meta-info|plot:png|plot:plotly1|plot:plotly2|plot:hybrid|plot:table|raw-text
              restriction: >
                def restriction(**args):
                  return dict()
              dj_query: > # assume all schemas that user has access will be VM loaded
                def dj_query(**vms):
                  Employee, Computer = (vms['contributor_company'].Employee, vms['contributor_company'].Computer)
                  return Employee * Computer, dict(order_by='employee_name ASC', format='frame')
              redirect_page: 'page2'
    page2:
      route: /session # dev, be careful of name collisions
      args:
        - subject_name
        - session_number
      hidden: true
      grids:
        grid1:
          type: fixed
          max_component_per_page: 20
          rows: 1
          columns: 3
          components:
            component1:
              row_span: 0
              column_span: 0
              type: plot:png
              restriction: >
                def restriction(**args):
                  return dict(**args)
              dj_query: >
                def dj_query(**vms):
                  Employee, Computer = (vms['contributor_company'].Employee, vms['contributor_company'].Computer)
                  return Employee * Computer, dict(order_by='employee_name ASC', format='frame')
            component2:
              row_span: 0
              column_span: 1
              type: plot:plotly1
              restriction: >
                def restriction(**args):
                  return dict(**args)
              dj_query: >
                def dj_query():
                  chen_lab.spawn_missing_classes()
                  return TrainingStatsPlotly.proj(plotly1='trial_mean'), dict(order_by=['KEY DESC', 'mouse_id'], limit=15)  # (dj_query() & restriction()).fetch1('plotly1')
              diff_checker: >
                def diff_checker(**args):
                  return TrainingStatsPlotly.proj(hash='trial_mean_hash')
        grid2:
          type: dynamic
          max_component_per_page: 20
          grid_width: 3
          grid_query: >
            def grid_query():
              chen_lab.spawn_missing_classes()
              return DailySession(), dict(order_by=['KEY DESC', 'mouse_id'], limit=15) # primary keys from the dj_query
          component_orientation: portrait # portrait|landscape
          component_templates:
            component_template_0:
              type: meta-info
              component_query: >
                def component_query():
                  chen_lab.spawn_missing_classes()
                  return TrainingStats(), dict(order_by=['KEY DESC', 'mouse_id'], limit=15)  # (dj_query() & restriction()).fetch1() # restricted on records from restriction_query
            component_template_1:
              type: plot:plotly1
              component_query: >
                def component_query():
                  chen_lab.spawn_missing_classes()
                  return TrainingStatsPlotly.proj(plotly1='trial_mean'), dict(order_by=['KEY DESC', 'mouse_id'], limit=15)  # (dj_query() & restriction()).fetch1('plotly1')
              diff_checker: >
                def diff_checker(**args):
                  return TrainingStatsPlotly.proj(hash='trial_mean_hash')
            component_template_2:
              type: plot:plotly1
              component_query: >
                def component_query():
                  chen_lab.spawn_missing_classes()
                  return TrainingStatsPlotly.proj(plotly1='trial_mean'), dict(order_by=['KEY DESC', 'mouse_id'], limit=15)  # (dj_query() & restriction()).fetch1('plotly1')
              diff_checker: >
                def diff_checker(**args):
                  return TrainingStatsPlotly.proj(hash='trial_mean_hash')
